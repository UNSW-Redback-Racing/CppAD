<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Vector Math Operators: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Vector Math Operators: Example and Test">
<meta name="keywords" id="keywords" content=" atomic vector math operators: example test purpose x op left right y source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_three_vector_math.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_three_mat_mul.hpp.htm" target="_top">Prev</a>
</td><td><a href="chkpoint_two.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_three_example</option>
<option>atomic_three_vector_math.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_advalued_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_example_htm.js'></script>
</td>
<td>atomic_three_vector_math.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>x</option>
<option>op</option>
<option>left</option>
<option>right</option>
<option>y</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Atomic Vector Math Operators: Example and Test</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
The atomic function implements

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>op</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>
 are defined below.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 to denote the argument to the atomic function.
The length of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is denoted by 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and must be odd.
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;1)&nbsp;/&nbsp;2</span></font></code>
.

<br>
<br>
<b><big><a name="op" id="op">op</a></big></b>
<br>
The value 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>

is a constant parameter with the following possible values:
<code><font color="blue">0</font></code> for addition,
<code><font color="blue">1</font></code> for subtraction,
<code><font color="blue">2</font></code> for multiplication,
<code><font color="blue">2</font></code> for division.
We use 
<code><i><font color="black"><span style='white-space: nowrap'>op</span></font></i></code>
 for the corresponding operator.

<br>
<br>
<b><big><a name="left" id="left">left</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i></code>
 to denote the following sub-vector of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)<br>
</span></font></code>
<br>
<b><big><a name="right" id="right">right</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>
 to denote the following sub-vector of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;1]&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[2&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)<br>
</span></font></code>
<br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 to denote the atomic function return value.
The length of 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.


<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>          <i><font color="#9A1900">// isolate items below to this file</font></i>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// abbreviations</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_vector_math</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <b><font color="#000000">atomic_vector_math</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> name<font color="#990000">)</font> <font color="#990000">:</font>
    CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>name<font color="#990000">)</font>
    <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// type</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_type</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>        type_y      <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// n, m</font></i>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#990000">(</font>n <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">/</font> <font color="#993399">2</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// ok</font></i>
        <font color="#009900">bool</font> ok  <font color="#990000">=</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n<font color="#990000">;</font>
        ok      <font color="#990000">&amp;=</font> type_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// type_y</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            type_y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font> type_x<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">,</font> type_x<font color="#990000">[</font>m <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// forward mode</font></i>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Scalar</font><font color="#990000">&gt;</font>
    <font color="#009900">bool</font> <b><font color="#000000">template_forward</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                             n           <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             op          <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             p           <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             q           <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>Scalar<font color="#990000">&gt;&amp;</font>              tx          <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font>Scalar<font color="#990000">&gt;&amp;</font>                    ty          <font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <i><font color="#9A1900">// m</font></i>
        <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#990000">(</font>n <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">/</font> <font color="#993399">2</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> n <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> m <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">switch</font></b><font color="#990000">(</font>op<font color="#990000">)</font>
        <font color="#FF0000">{</font>
            <i><font color="#9A1900">// addition</font></i>
            <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> p<font color="#990000">;</font> k <font color="#990000">&lt;=</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> left_index   <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    <font color="#008080">size_t</font> right_index  <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    <font color="#008080">size_t</font> y_index      <font color="#990000">=</font> i <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    ty<font color="#990000">[</font>y_index<font color="#990000">]</font>         <font color="#990000">=</font> tx<font color="#990000">[</font>left_index<font color="#990000">]</font> <font color="#990000">+</font> tx<font color="#990000">[</font>right_index<font color="#990000">];</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <i><font color="#9A1900">// subtraction</font></i>
            <b><font color="#0000FF">case</font></b> <font color="#993399">1</font><font color="#990000">:</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> p<font color="#990000">;</font> k <font color="#990000">&lt;=</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> left_index   <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    <font color="#008080">size_t</font> right_index  <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    <font color="#008080">size_t</font> y_index      <font color="#990000">=</font> i <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    ty<font color="#990000">[</font>y_index<font color="#990000">]</font>         <font color="#990000">=</font> tx<font color="#990000">[</font>left_index<font color="#990000">]</font> <font color="#990000">-</font> tx<font color="#990000">[</font>right_index<font color="#990000">];</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <i><font color="#9A1900">// multiplication</font></i>
            <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> p<font color="#990000">;</font> k <font color="#990000">&lt;=</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> y_index <font color="#990000">=</font> i <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    ty<font color="#990000">[</font>y_index<font color="#990000">]</font>    <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> d <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> d <font color="#990000">&lt;=</font> k<font color="#990000">;</font> d<font color="#990000">++)</font>
                    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> left_index   <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> <font color="#990000">(</font>k<font color="#990000">-</font>d<font color="#990000">);</font>
                        <font color="#008080">size_t</font> right_index  <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                        ty<font color="#990000">[</font>y_index<font color="#990000">]</font>        <font color="#990000">+=</font> tx<font color="#990000">[</font>left_index<font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font>right_index<font color="#990000">];</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <i><font color="#9A1900">// division</font></i>
            <b><font color="#0000FF">case</font></b> <font color="#993399">3</font><font color="#990000">:</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> p<font color="#990000">;</font> k <font color="#990000">&lt;=</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> y_index     <font color="#990000">=</font> i <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    <font color="#008080">size_t</font> left_index  <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> k<font color="#990000">;</font>
                    ty<font color="#990000">[</font>y_index<font color="#990000">]</font>        <font color="#990000">=</font> tx<font color="#990000">[</font>left_index<font color="#990000">];</font>
                    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> d <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> d <font color="#990000">&lt;=</font> k<font color="#990000">;</font> d<font color="#990000">++)</font>
                    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> y_other      <font color="#990000">=</font> i <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> <font color="#990000">(</font>k<font color="#990000">-</font>d<font color="#990000">);</font>
                        <font color="#008080">size_t</font> right_index  <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> d<font color="#990000">;</font>
                        ty<font color="#990000">[</font>y_index<font color="#990000">]</font>        <font color="#990000">-=</font> ty<font color="#990000">[</font>y_other<font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font>right_index<font color="#990000">];</font>
                    <font color="#FF0000">}</font>
                    <font color="#008080">size_t</font> right_index <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i <font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font>q<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">;</font>
                    ty<font color="#990000">[</font>y_index<font color="#990000">]</font> <font color="#990000">/=</font> tx<font color="#990000">[</font>right_index<font color="#990000">];</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <i><font color="#9A1900">// error</font></i>
            <b><font color="#0000FF">default</font></b><font color="#990000">:</font>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font><b><font color="#0000FF">false</font></b><font color="#990000">);</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// forward mode routines called by ADFun&lt;Base&gt; objects</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             need_y      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             p           <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             q           <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              tx          <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                    ty          <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> op <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n  <font color="#990000">=</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#000000">template_forward</font></b><font color="#990000">(</font>n<font color="#990000">,</font> op<font color="#990000">,</font> p<font color="#990000">,</font> q<font color="#990000">,</font> tx<font color="#990000">,</font> ty<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// forward mode routines called by ADFun&lt; AD&lt;Base&gt; , Base&gt; objects</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>        aparameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             need_y      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             p           <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             q           <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>        atx         <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>              aty         <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> op <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font> aparameter_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n  <font color="#990000">=</font> aparameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#000000">template_forward</font></b><font color="#990000">(</font>n<font color="#990000">,</font> op<font color="#990000">,</font> p<font color="#990000">,</font> q<font color="#990000">,</font> atx<font color="#990000">,</font> aty<font color="#990000">);</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font><font color="#990000">;</font> <i><font color="#9A1900">// End of atomic_vector_math class</font></i>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i>

<font color="#009900">bool</font> <b><font color="#000000">vector_math</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// afun</font></i>
    <i><font color="#9A1900">// atomic vector_math object</font></i>
    <font color="#008080">atomic_vector_math</font> <b><font color="#000000">afun</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_vector_math"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// m, n</font></i>
    <i><font color="#9A1900">// size of x and y</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">1</font> <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> m<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// x</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> op <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> op <font color="#990000">&lt;</font> <font color="#993399">4</font><font color="#990000">;</font> <font color="#990000">++</font>op<font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <i><font color="#9A1900">// Create the function f(x) = left op right</font></i>
        <i><font color="#9A1900">//</font></i>
        ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>op<font color="#990000">);</font> <i><font color="#9A1900">// code for this operator</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">]</font>     <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">);</font>   <i><font color="#9A1900">// left[i]</font></i>
            ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>m<font color="#990000">+</font><font color="#993399">2</font><font color="#990000">*</font>i<font color="#990000">);</font> <i><font color="#9A1900">// right[i]</font></i>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// y</font></i>
        <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// ay = left op right</font></i>
        <b><font color="#000000">afun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> f<font color="#990000">;</font>
        f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b> <font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// check ay</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">AD&lt;double&gt;</font> check<font color="#990000">;</font>
            <b><font color="#0000FF">switch</font></b><font color="#990000">(</font>op<font color="#990000">)</font>
            <font color="#FF0000">{</font>
                <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
                check <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
                <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                <b><font color="#0000FF">case</font></b> <font color="#993399">1</font><font color="#990000">:</font>
                check <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">-</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
                <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
                check <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
                <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                <b><font color="#0000FF">case</font></b> <font color="#993399">3</font><font color="#990000">:</font>
                check <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">/</font> ax<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
                <b><font color="#0000FF">break</font></b><font color="#990000">;</font>
            <font color="#FF0000">}</font>
            ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font> ay<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic_three/vector_math.cpp

</body>
</html>
